def rungeKutta(t0, y0, tn, h): 
    # Count number of iterations using step size or 
    # step height h 
    n = int((tn - t0)/h)  
    # Iterate for number of iterations 
    y = y0 
    for i in range(1, n+1): 
        k1 = h * f(t0, y) 
        k2 = h * f(t0 + 0.5 * h, y + 0.5 * k1) 
        k3 = h * f(t0 + 0.5 * h, y + 0.5 * k2) 
        k4 = h * f(t0 + h, y + k3) 
        
        # Update next value of y 
        y = y + (1.0 / 6.0)*(k1 + 2 * k2 + 2 * k3 + k4) 
  
        # Update next value of x 
        t0 = t0 + h 
    return y
    
import numpy
import math
def ABtwostep(t0, w0, tn, h):
    n = int((tn-t0)/h)
    w1 = rungeKutta(t0, w0, h, h)
    w=numpy.zeros(n+1)
    w[0]=w0
    w[1]=w1
    for i in range(2,n+1):
        w[i]=w[i-1]+(h/2)*(3*f(t0+h,w[i-1])-f(t0,w[i-2]))
        t0 = t0 + h
    print('Using Adams-Bashforth Two-Step explicit method:')
    for i in range(n+1):
        print('w[',i,']=',w[i])
def ABthreestep(t0, w0, tn, h):
    n = int((tn-t0)/h)
    w1 = rungeKutta(t0, w0, h, h,)
    w2 = rungeKutta(t0, w0, 2*h, h)
    w = numpy.zeros(n+1)
    w[0] = w0
    w[1] = w1
    w[2] = w2
    for i in range(3,n+1):
        w[i]=w[i-1]+(h/12)*(23*f(t0+2*h,w[i-1])-16*f(t0+h,w[i-2])+5*f(t0,w[i-3]))
        t0 = t0 + h
    print('Using Adams-Bashforth Three-Step explicit method:')
    for i in range(n+1):
        print('w[',i,']=',w[i])

def ABfourstep(t0, w0, tn, h):
    n = int((tn-t0)/h)
    w1 = rungeKutta(t0, w0, h, h,)
    w2 = rungeKutta(t0, w0, 2*h, h)
    w3 = rungeKutta(t0, w0, 3*h, h)
    w = numpy.zeros(n+1)
    w[0] = w0
    w[1] = w1
    w[2] = w2
    w[3] = w3
    for i in range(4,n+1):
        w[i]=w[i-1]+(h/24)*(55*f(t0+3*h,w[i-1])-59*f(t0+2*h,w[i-2])+37*f(t0+h,w[i-3])-9*f(t0,w[i-4]))
        t0 = t0 + h
    print('Using Adams-Bashforth Four-Step explicit method:')
    for i in range(n+1):
        print('w[',i,']=',w[i])

def ABfivestep(t0, w0, tn, h):
    n = int((tn-t0)/h)
    w1 = rungeKutta(t0, w0, h, h,)
    w2 = rungeKutta(t0, w0, 2*h, h)
    w3 = rungeKutta(t0, w0, 3*h, h)
    w4 = rungeKutta(t0, w0, 4*h, h)
    w = numpy.zeros(n+1)
    w[0] = w0
    w[1] = w1
    w[2] = w2
    w[3] = w3
    w[4] = w4
    for i in range(5,n+1):
        w[i]=w[i-1]+(h/720)*(1901*f(t0+4*h,w[i-1])-2774*f(t0+3*h,w[i-2])+2616*f(t0+2*h,w[i-3])-1274*f(t0+h,w[i-4])+251*f(t0,w[i-5]))
        t0 = t0 + h
    print('Using Adams-Bashforth Five-Step explicit method:')
    for i in range(n+1):
        print('w[',i,']=',w[i])
